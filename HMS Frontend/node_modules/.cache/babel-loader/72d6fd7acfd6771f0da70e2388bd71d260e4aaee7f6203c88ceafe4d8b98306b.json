{"ast":null,"code":"import axios from 'axios';\nimport { createUrl, log } from '../utils/utils';\nimport { toast } from 'react-toastify';\nimport { getAuthorizationHeader } from '../utils/jwtUtil';\nexport async function registerUser(name, email, password, contactNo, age, bloodGroup, address, role) {\n  const url = createUrl('/patient/register');\n  const body = {\n    name,\n    email,\n    password,\n    contactNo,\n    age,\n    bloodGroup,\n    address,\n    role\n  };\n  try {\n    // Check if the user already exists by email\n    // try {\n    //   const getUserResponse = await axios.get(url);\n    //   debugger;\n    //   if (getUserResponse.data && getUserResponse.data.email === email) {\n    //     console.log(getUserResponse.data);\n    //     return { email: '' }; // Return an empty object to indicate existing email\n    //   }\n    //   if(getUserResponse.data && getUserResponse.data.role === 'Patient'){\n    //     return {userRoles : 'Patient'}\n    //   }\n    //   else if (getUserResponse.data && getUserResponse.data.userRoles === 'Admin'){\n    //     return {userRoles : 'Admin'}\n    //   }\n    //   else if (getUserResponse.data && getUserResponse.data.userRoles === 'Doctor'){\n    //     return {userRoles : 'Doctor'}\n    //   }\n    // } catch (getUserEx) {\n    //    log('Error fetching user data by email:', getUserEx);\n    // }\n\n    // Proceed with registration if the email is not found in the database\n    debugger;\n    const response = await axios.post(url, body);\n    log(response.data);\n    return response.data;\n  } catch (ex) {\n    log('Error registering user:', ex);\n    return null;\n  }\n}\nexport async function loginUser(email, password) {\n  //const url = createUrl('/auth/signin')\n  const url = createUrl('/authenticate/login');\n  const body = {\n    email,\n    password\n  };\n\n  // wait till axios is making the api call and getting response from server\n  try {\n    const response = await axios.post(url, body);\n    log(response.data);\n    debugger;\n    const token = response.data.jwt;\n    const userRoles = response.data.userRoles;\n    const userId = response.data.userId;\n    const isLoggedIn = response.data.isLoggedIn; //true;\n\n    debugger;\n    sessionStorage.setItem(\"token\", token);\n    sessionStorage.setItem(\"userRoles\", userRoles);\n    sessionStorage.setItem(\"userId\", userId);\n    sessionStorage.setItem(\"isLoggedIn\", isLoggedIn);\n    console.log(sessionStorage.getItem(\"userId\"));\n    return response;\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}\nexport async function getPatientById(patientId) {\n  const url = createUrl(`/patient/${patientId}`);\n  debugger;\n  // const body = {\n  //   patientId\n  // }\n  // wait till axios is making the api call and getting response from server\n  try {\n    const response = await axios.get(url);\n    log(response.data);\n    debugger;\n    const token = response.data.password;\n    const userRoles = response.data.role;\n    const userId = response.data.id;\n    const isLoggedIn = true; //response.data.isLoggedIn;\n\n    sessionStorage.setItem(\"token\", token);\n    sessionStorage.setItem(\"userRoles\", userRoles);\n    sessionStorage.setItem(\"userId\", userId);\n    sessionStorage.setItem(\"isLoggedIn\", isLoggedIn);\n    return response.data;\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}\n\n/////////omkar fun ////\n\nexport async function getDoctorById(doctorId) {\n  const url = createUrl(`/doctor/${doctorId}`);\n  debugger;\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        Authorization: getAuthorizationHeader()\n      }\n    });\n    log(response.data);\n    debugger;\n    return response.data;\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}\nexport async function getAdminById(adminId) {\n  debugger;\n  const url = createUrl(`/admin/${adminId}`);\n  debugger;\n  try {\n    //const response = await axios.get(url)\n    const response = await axios.get(url, {\n      headers: {\n        Authorization: getAuthorizationHeader()\n      }\n    });\n    log(response.data);\n    debugger;\n    return response.data;\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}\nexport async function getAllPatients() {\n  const url = createUrl(`/patient`);\n  debugger;\n  try {\n    const response = await axios.get(url);\n    log(response.data);\n    debugger;\n    return response.data;\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}\nexport async function updateStatusOfPatient(patientId) {\n  const url = createUrl(`/patient/status/patientId/${patientId}`);\n  debugger;\n  try {\n    const response = await axios.put(url);\n    log(response.data);\n    if (response.data) {\n      // ShowMessage(\"Record Updated!\");\n      debugger;\n      console.log(\"hi\");\n      toast.success(\"Patient Deleted Successfully\");\n    } else {\n      toast.error(\"An error occurred during getting response \");\n    }\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}\nexport async function registerDoctor(doctor) {\n  const url = createUrl('/admin/doctor');\n  // const body = {\n  //   doctor\n  // };\n\n  try {\n    debugger;\n    const response = await axios.post(url, doctor, {\n      headers: {\n        Authorization: getAuthorizationHeader()\n      }\n    });\n    log(response.data);\n    return response.data;\n  } catch (ex) {\n    log('Error registering user:', ex);\n    return null;\n  }\n}\nexport async function updateStatusOfDoctors(doctorId) {\n  const url = createUrl(`/doctor/${doctorId}`);\n  debugger;\n  try {\n    const response = await axios.put(url);\n    log(response.data);\n    if (response.data) {\n      // ShowMessage(\"Record Updated!\");\n      debugger;\n      console.log(\"hi\");\n      toast.success(\"Doctor Removed Successfully\");\n    } else {\n      toast.error(\"An error occurred during getting response \");\n    }\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}","map":{"version":3,"names":["axios","createUrl","log","toast","getAuthorizationHeader","registerUser","name","email","password","contactNo","age","bloodGroup","address","role","url","body","response","post","data","ex","loginUser","token","jwt","userRoles","userId","isLoggedIn","sessionStorage","setItem","console","getItem","getPatientById","patientId","get","id","getDoctorById","doctorId","headers","Authorization","getAdminById","adminId","getAllPatients","updateStatusOfPatient","put","success","error","registerDoctor","doctor","updateStatusOfDoctors"],"sources":["C:/Users/MAYUR GADEKAR/Desktop/HMS Frontend Git/HMS Frontend/src/services/user.js"],"sourcesContent":["import axios from 'axios';\r\nimport { createUrl, log } from '../utils/utils';\r\nimport { toast } from 'react-toastify';\r\nimport { getAuthorizationHeader } from '../utils/jwtUtil';\r\n\r\nexport async function registerUser(\r\n  name,\r\n  email,\r\n  password,\r\n  contactNo,\r\n  age,\r\n  bloodGroup,\r\n  address,\r\n  role\r\n) {\r\n  const url = createUrl('/patient/register');\r\n  const body = {\r\n    name,\r\n    email,\r\n    password,\r\n    contactNo,\r\n    age,\r\n    bloodGroup,\r\n    address,\r\n    role\r\n  };\r\n\r\n  try {\r\n   // Check if the user already exists by email\r\n    // try {\r\n    //   const getUserResponse = await axios.get(url);\r\n    //   debugger;\r\n    //   if (getUserResponse.data && getUserResponse.data.email === email) {\r\n    //     console.log(getUserResponse.data);\r\n    //     return { email: '' }; // Return an empty object to indicate existing email\r\n    //   }\r\n    //   if(getUserResponse.data && getUserResponse.data.role === 'Patient'){\r\n    //     return {userRoles : 'Patient'}\r\n    //   }\r\n    //   else if (getUserResponse.data && getUserResponse.data.userRoles === 'Admin'){\r\n    //     return {userRoles : 'Admin'}\r\n    //   }\r\n    //   else if (getUserResponse.data && getUserResponse.data.userRoles === 'Doctor'){\r\n    //     return {userRoles : 'Doctor'}\r\n    //   }\r\n    // } catch (getUserEx) {\r\n    //    log('Error fetching user data by email:', getUserEx);\r\n    // }\r\n\r\n    // Proceed with registration if the email is not found in the database\r\n    debugger;\r\n    const response = await axios.post(url, body);\r\n    log(response.data);\r\n    return response.data;\r\n  } catch (ex) {\r\n    log('Error registering user:', ex);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function loginUser(email, password) {\r\n  //const url = createUrl('/auth/signin')\r\n  const url = createUrl('/authenticate/login')\r\n  const body = {\r\n    email,\r\n    password,\r\n  }\r\n\r\n  // wait till axios is making the api call and getting response from server\r\n  try {\r\n    const response = await axios.post(url, body)\r\n    log(response.data)\r\n    debugger; \r\n    const token = response.data.jwt;\r\n    const userRoles = response.data.userRoles;\r\n    const userId = response.data.userId;\r\n    const isLoggedIn = response.data.isLoggedIn; //true;\r\n\r\n    debugger;\r\n    sessionStorage.setItem(\"token\" , token);\r\n    sessionStorage.setItem(\"userRoles\", userRoles);\r\n    sessionStorage.setItem(\"userId\", userId);\r\n    sessionStorage.setItem(\"isLoggedIn\", isLoggedIn);\r\n    console.log(sessionStorage.getItem(\"userId\"));\r\n    return response\r\n  } catch (ex) {\r\n    log(ex)\r\n    return null\r\n  }\r\n}\r\n\r\nexport async function getPatientById(patientId){\r\n  const url = createUrl(`/patient/${patientId}`)\r\ndebugger;\r\n  // const body = {\r\n  //   patientId\r\n  // }\r\n  // wait till axios is making the api call and getting response from server\r\n  try {\r\n    const response = await axios.get(url)\r\n    log(response.data)\r\n    debugger; \r\n    const token = response.data.password;\r\n    const userRoles = response.data.role;\r\n    const userId = response.data.id;\r\n    const isLoggedIn = true;//response.data.isLoggedIn;\r\n\r\n    sessionStorage.setItem(\"token\" , token);\r\n    sessionStorage.setItem(\"userRoles\",userRoles) ;\r\n    sessionStorage.setItem(\"userId\", userId);\r\n    sessionStorage.setItem(\"isLoggedIn\", isLoggedIn);\r\n    return response.data\r\n  } catch (ex) {\r\n    log(ex)\r\n    return null\r\n  }\r\n}\r\n\r\n\r\n/////////omkar fun ////\r\n\r\nexport async function getDoctorById(doctorId){\r\n  const url = createUrl(`/doctor/${doctorId}`)\r\n  debugger;\r\n\r\n  try {\r\n    const response = await axios.get(url,{\r\n      headers: {\r\n        Authorization: getAuthorizationHeader(),\r\n      },\r\n    })\r\n    \r\n    \r\n    log(response.data)\r\n    debugger; \r\n    return response.data\r\n  } catch (ex) {\r\n    log(ex)\r\n    return null\r\n  }\r\n}\r\n\r\nexport async function getAdminById(adminId){\r\n\r\n  debugger;\r\n  const url = createUrl(`/admin/${adminId}`)\r\n  debugger;\r\n\r\n  try {\r\n    //const response = await axios.get(url)\r\n    const response = await axios.get(url, {\r\n      headers: {\r\n        Authorization: getAuthorizationHeader(),\r\n      },\r\n    });\r\n    \r\n    log(response.data)\r\n    debugger; \r\n    return response.data\r\n  } catch (ex) {\r\n    log(ex)\r\n    return null\r\n  }\r\n}\r\n\r\nexport async function getAllPatients(){\r\n  const url = createUrl(`/patient`)\r\n  debugger;\r\n\r\n  try {\r\n    const response = await axios.get(url)\r\n    log(response.data)\r\n    debugger; \r\n    return response.data\r\n  } catch (ex) {\r\n    log(ex)\r\n    return null\r\n  }\r\n}\r\n\r\nexport async function updateStatusOfPatient(patientId){\r\n  const url = createUrl(`/patient/status/patientId/${patientId}`)\r\n  debugger;\r\n\r\n  try {\r\n    const response = await axios.put(url)\r\n    log(response.data)\r\n    if(response.data)\r\n    {\r\n       // ShowMessage(\"Record Updated!\");\r\n       debugger;\r\n       console.log(\"hi\");\r\n        toast.success(\"Patient Deleted Successfully\");\r\n        \r\n        \r\n\r\n    }\r\n     else\r\n     {\r\n      toast.error(\"An error occurred during getting response \");\r\n     }\r\n  } catch (ex) {\r\n    log(ex)\r\n    return null\r\n  }\r\n}\r\n\r\nexport async function registerDoctor(doctor) {\r\n  const url = createUrl('/admin/doctor');\r\n  // const body = {\r\n  //   doctor\r\n  // };\r\n\r\n  try {\r\n   \r\n    debugger;\r\n    const response = await axios.post(url, doctor , {\r\n      headers: {\r\n        Authorization: getAuthorizationHeader(),\r\n      },\r\n    });\r\n    log(response.data);\r\n    return response.data;\r\n  } catch (ex) {\r\n    log('Error registering user:', ex);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function updateStatusOfDoctors(doctorId) {\r\n  const url = createUrl(`/doctor/${doctorId}`)\r\n  debugger;\r\n\r\n  try {\r\n    const response = await axios.put(url)\r\n    log(response.data)\r\n    if (response.data ) {\r\n      // ShowMessage(\"Record Updated!\");\r\n      debugger;\r\n      console.log(\"hi\");\r\n      toast.success(\"Doctor Removed Successfully\");\r\n\r\n\r\n\r\n    }\r\n    else {\r\n      toast.error(\"An error occurred during getting response \");\r\n    }\r\n  } catch (ex) {\r\n    log(ex)\r\n    return null\r\n  }\r\n}\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}