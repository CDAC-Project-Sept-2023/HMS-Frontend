{"ast":null,"code":"import axios from 'axios';\nimport { createUrl, log } from '../utils/utils';\nimport { toast } from 'react-toastify';\nexport async function registerUser(name, email, password, contactNo, age, bloodGroup, address, role) {\n  const url = createUrl('/patient/register');\n  const body = {\n    name,\n    email,\n    password,\n    contactNo,\n    age,\n    bloodGroup,\n    address,\n    role\n  };\n  try {\n    // Check if the user already exists by email\n    // try {\n    //   const getUserResponse = await axios.get(url);\n    //   debugger;\n    //   if (getUserResponse.data && getUserResponse.data.email === email) {\n    //     console.log(getUserResponse.data);\n    //     return { email: '' }; // Return an empty object to indicate existing email\n    //   }\n    //   if(getUserResponse.data && getUserResponse.data.role === 'Patient'){\n    //     return {userRoles : 'Patient'}\n    //   }\n    //   else if (getUserResponse.data && getUserResponse.data.userRoles === 'Admin'){\n    //     return {userRoles : 'Admin'}\n    //   }\n    //   else if (getUserResponse.data && getUserResponse.data.userRoles === 'Doctor'){\n    //     return {userRoles : 'Doctor'}\n    //   }\n    // } catch (getUserEx) {\n    //    log('Error fetching user data by email:', getUserEx);\n    // }\n\n    // Proceed with registration if the email is not found in the database\n    debugger;\n    const response = await axios.post(url, body);\n    log(response.data);\n    return response.data;\n  } catch (ex) {\n    log('Error registering user:', ex);\n    return null;\n  }\n}\nexport async function loginUser(email, password) {\n  //const url = createUrl('/auth/signin')\n  const url = createUrl('/authenticate/signin');\n  const body = {\n    email,\n    password\n  };\n\n  // wait till axios is making the api call and getting response from server\n  try {\n    const response = await axios.post(url, body);\n    log(response.data);\n    debugger;\n    const token = response.data.jwt;\n    const userRoles = response.data.role;\n    const userId = response.data.id;\n    const isLoggedIn = true; //response.data.isLoggedIn;\n\n    sessionStorage.setItem(\"token\", token);\n    sessionStorage.setItem(\"userRoles\", userRoles);\n    sessionStorage.setItem(\"userId\", userId);\n    sessionStorage.setItem(\"isLoggedIn\", isLoggedIn);\n    console.log(sessionStorage.getItem(userId));\n    return response.data;\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}\nexport async function getPatientById(patientId) {\n  const url = createUrl(`/patient/${patientId}`);\n  debugger;\n  // const body = {\n  //   patientId\n  // }\n  // wait till axios is making the api call and getting response from server\n  try {\n    const response = await axios.get(url);\n    log(response.data);\n    debugger;\n    // const token = response.data.jwt;\n    // const userRoles = response.data.role;\n    // const userId = response.data.id;\n    // const isLoggedIn = true;//response.data.isLoggedIn;\n\n    // sessionStorage.setItem(\"token\" , token);\n    // sessionStorage.setItem(\"userRoles\",response.data.role) ;\n    // sessionStorage.setItem(\"userId\", response.data.id);\n    // //sessionStorage.setItem(\"isLoggedIn\", isLoggedIn);\n    return response.data;\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}\n\n/////////","map":{"version":3,"names":["axios","createUrl","log","toast","registerUser","name","email","password","contactNo","age","bloodGroup","address","role","url","body","response","post","data","ex","loginUser","token","jwt","userRoles","userId","id","isLoggedIn","sessionStorage","setItem","console","getItem","getPatientById","patientId","get"],"sources":["C:/Users/MAYUR GADEKAR/Desktop/HMS Frontend Git/HMS Frontend/src/services/user.js"],"sourcesContent":["import axios from 'axios';\r\nimport { createUrl, log } from '../utils/utils';\r\nimport { toast } from 'react-toastify';\r\n\r\nexport async function registerUser(\r\n  name,\r\n  email,\r\n  password,\r\n  contactNo,\r\n  age,\r\n  bloodGroup,\r\n  address,\r\n  role\r\n) {\r\n  const url = createUrl('/patient/register');\r\n  const body = {\r\n    name,\r\n    email,\r\n    password,\r\n    contactNo,\r\n    age,\r\n    bloodGroup,\r\n    address,\r\n    role\r\n  };\r\n\r\n  try {\r\n   // Check if the user already exists by email\r\n    // try {\r\n    //   const getUserResponse = await axios.get(url);\r\n    //   debugger;\r\n    //   if (getUserResponse.data && getUserResponse.data.email === email) {\r\n    //     console.log(getUserResponse.data);\r\n    //     return { email: '' }; // Return an empty object to indicate existing email\r\n    //   }\r\n    //   if(getUserResponse.data && getUserResponse.data.role === 'Patient'){\r\n    //     return {userRoles : 'Patient'}\r\n    //   }\r\n    //   else if (getUserResponse.data && getUserResponse.data.userRoles === 'Admin'){\r\n    //     return {userRoles : 'Admin'}\r\n    //   }\r\n    //   else if (getUserResponse.data && getUserResponse.data.userRoles === 'Doctor'){\r\n    //     return {userRoles : 'Doctor'}\r\n    //   }\r\n    // } catch (getUserEx) {\r\n    //    log('Error fetching user data by email:', getUserEx);\r\n    // }\r\n\r\n    // Proceed with registration if the email is not found in the database\r\n    debugger;\r\n    const response = await axios.post(url, body);\r\n    log(response.data);\r\n    return response.data;\r\n  } catch (ex) {\r\n    log('Error registering user:', ex);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function loginUser(email, password) {\r\n  //const url = createUrl('/auth/signin')\r\n  const url = createUrl('/authenticate/signin')\r\n  const body = {\r\n    email,\r\n    password,\r\n  }\r\n\r\n  // wait till axios is making the api call and getting response from server\r\n  try {\r\n    const response = await axios.post(url, body)\r\n    log(response.data)\r\n    debugger; \r\n    const token = response.data.jwt;\r\n    const userRoles = response.data.role;\r\n    const userId = response.data.id;\r\n    const isLoggedIn = true;//response.data.isLoggedIn;\r\n\r\n    sessionStorage.setItem(\"token\" , token);\r\n    sessionStorage.setItem(\"userRoles\", userRoles);\r\n    sessionStorage.setItem(\"userId\", userId);\r\n    sessionStorage.setItem(\"isLoggedIn\", isLoggedIn);\r\n    console.log(sessionStorage.getItem(userId));\r\n    return response.data\r\n  } catch (ex) {\r\n    log(ex)\r\n    return null\r\n  }\r\n}\r\n\r\nexport async function getPatientById(patientId){\r\n\r\n  const url = createUrl(`/patient/${patientId}`)\r\ndebugger;\r\n  // const body = {\r\n  //   patientId\r\n  // }\r\n  // wait till axios is making the api call and getting response from server\r\n  try {\r\n    const response = await axios.get(url)\r\n    log(response.data)\r\n    debugger; \r\n    // const token = response.data.jwt;\r\n    // const userRoles = response.data.role;\r\n    // const userId = response.data.id;\r\n    // const isLoggedIn = true;//response.data.isLoggedIn;\r\n\r\n    // sessionStorage.setItem(\"token\" , token);\r\n    // sessionStorage.setItem(\"userRoles\",response.data.role) ;\r\n    // sessionStorage.setItem(\"userId\", response.data.id);\r\n    // //sessionStorage.setItem(\"isLoggedIn\", isLoggedIn);\r\n    return response.data\r\n  } catch (ex) {\r\n    log(ex)\r\n    return null\r\n  }\r\n}\r\n\r\n\r\n/////////\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,EAAEC,GAAG,QAAQ,gBAAgB;AAC/C,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,OAAO,eAAeC,YAAYA,CAChCC,IAAI,EACJC,KAAK,EACLC,QAAQ,EACRC,SAAS,EACTC,GAAG,EACHC,UAAU,EACVC,OAAO,EACPC,IAAI,EACJ;EACA,MAAMC,GAAG,GAAGZ,SAAS,CAAC,mBAAmB,CAAC;EAC1C,MAAMa,IAAI,GAAG;IACXT,IAAI;IACJC,KAAK;IACLC,QAAQ;IACRC,SAAS;IACTC,GAAG;IACHC,UAAU;IACVC,OAAO;IACPC;EACF,CAAC;EAED,IAAI;IACH;IACC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA,MAAMG,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAACH,GAAG,EAAEC,IAAI,CAAC;IAC5CZ,GAAG,CAACa,QAAQ,CAACE,IAAI,CAAC;IAClB,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,EAAE,EAAE;IACXhB,GAAG,CAAC,yBAAyB,EAAEgB,EAAE,CAAC;IAClC,OAAO,IAAI;EACb;AACF;AAEA,OAAO,eAAeC,SAASA,CAACb,KAAK,EAAEC,QAAQ,EAAE;EAC/C;EACA,MAAMM,GAAG,GAAGZ,SAAS,CAAC,sBAAsB,CAAC;EAC7C,MAAMa,IAAI,GAAG;IACXR,KAAK;IACLC;EACF,CAAC;;EAED;EACA,IAAI;IACF,MAAMQ,QAAQ,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAACH,GAAG,EAAEC,IAAI,CAAC;IAC5CZ,GAAG,CAACa,QAAQ,CAACE,IAAI,CAAC;IAClB;IACA,MAAMG,KAAK,GAAGL,QAAQ,CAACE,IAAI,CAACI,GAAG;IAC/B,MAAMC,SAAS,GAAGP,QAAQ,CAACE,IAAI,CAACL,IAAI;IACpC,MAAMW,MAAM,GAAGR,QAAQ,CAACE,IAAI,CAACO,EAAE;IAC/B,MAAMC,UAAU,GAAG,IAAI,CAAC;;IAExBC,cAAc,CAACC,OAAO,CAAC,OAAO,EAAGP,KAAK,CAAC;IACvCM,cAAc,CAACC,OAAO,CAAC,WAAW,EAAEL,SAAS,CAAC;IAC9CI,cAAc,CAACC,OAAO,CAAC,QAAQ,EAAEJ,MAAM,CAAC;IACxCG,cAAc,CAACC,OAAO,CAAC,YAAY,EAAEF,UAAU,CAAC;IAChDG,OAAO,CAAC1B,GAAG,CAACwB,cAAc,CAACG,OAAO,CAACN,MAAM,CAAC,CAAC;IAC3C,OAAOR,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,EAAE,EAAE;IACXhB,GAAG,CAACgB,EAAE,CAAC;IACP,OAAO,IAAI;EACb;AACF;AAEA,OAAO,eAAeY,cAAcA,CAACC,SAAS,EAAC;EAE7C,MAAMlB,GAAG,GAAGZ,SAAS,CAAE,YAAW8B,SAAU,EAAC,CAAC;EAChD;EACE;EACA;EACA;EACA;EACA,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMf,KAAK,CAACgC,GAAG,CAACnB,GAAG,CAAC;IACrCX,GAAG,CAACa,QAAQ,CAACE,IAAI,CAAC;IAClB;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,EAAE,EAAE;IACXhB,GAAG,CAACgB,EAAE,CAAC;IACP,OAAO,IAAI;EACb;AACF;;AAGA"},"metadata":{},"sourceType":"module","externalDependencies":[]}