{"ast":null,"code":"import axios from 'axios';\nimport { createUrl, log } from '../utils/utils';\nexport async function registerUser(name, email, password, contactNo, age, bloodGroup, address, role) {\n  const url = createUrl('/patient/register');\n  const body = {\n    name,\n    email,\n    password,\n    contactNo,\n    age,\n    bloodGroup,\n    address,\n    role\n  };\n\n  try {\n    // Check if the user already exists by email\n    // try {\n    //   const getUserResponse = await axios.get(url);\n    //   debugger;\n    //   if (getUserResponse.data && getUserResponse.data.email === email) {\n    //     console.log(getUserResponse.data);\n    //     return { email: '' }; // Return an empty object to indicate existing email\n    //   }\n    //   if(getUserResponse.data && getUserResponse.data.role === 'Patient'){\n    //     return {userRoles : 'Patient'}\n    //   }\n    //   else if (getUserResponse.data && getUserResponse.data.userRoles === 'Admin'){\n    //     return {userRoles : 'Admin'}\n    //   }\n    //   else if (getUserResponse.data && getUserResponse.data.userRoles === 'Doctor'){\n    //     return {userRoles : 'Doctor'}\n    //   }\n    // } catch (getUserEx) {\n    //    log('Error fetching user data by email:', getUserEx);\n    // }\n    // Proceed with registration if the email is not found in the database\n    debugger;\n    const response = await axios.post(url, body);\n    log(response.data);\n    return response.data;\n  } catch (ex) {\n    log('Error registering user:', ex);\n    return null;\n  }\n}\nexport async function loginUser(email, password) {\n  //const url = createUrl('/auth/signin')\n  const url = createUrl('/authenticate/signin');\n  const body = {\n    email,\n    password\n  }; // wait till axios is making the api call and getting response from server\n\n  try {\n    const response = await axios.post(url, body);\n    log(response.data);\n    debugger;\n    const token = response.data.jwt;\n    const userRoles = response.data.role;\n    const userId = response.data.id;\n    const isLoggedIn = true; //response.data.isLoggedIn;\n\n    sessionStorage.setItem(\"token\", token);\n    sessionStorage.setItem(\"userRoles\", userRoles);\n    sessionStorage.setItem(\"userId\", userId);\n    sessionStorage.setItem(\"isLoggedIn\", isLoggedIn);\n    console.log(sessionStorage.getItem(userId));\n    return response.data;\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}\nexport async function getPatientById(patientId) {\n  const url = createUrl(`/patient/${patientId}`);\n  debugger; // const body = {\n  //   patientId\n  // }\n  // wait till axios is making the api call and getting response from server\n\n  try {\n    const response = await axios.get(url);\n    log(response.data);\n    debugger; // const token = response.data.jwt;\n    // const userRoles = response.data.role;\n    // const userId = response.data.id;\n    // const isLoggedIn = true;//response.data.isLoggedIn;\n    // sessionStorage.setItem(\"token\" , token);\n    // sessionStorage.setItem(\"userRoles\", userRoles);\n    // sessionStorage.setItem(\"userId\", userId);\n    // sessionStorage.setItem(\"isLoggedIn\", isLoggedIn);\n\n    return response.data;\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}","map":{"version":3,"names":["axios","createUrl","log","registerUser","name","email","password","contactNo","age","bloodGroup","address","role","url","body","response","post","data","ex","loginUser","token","jwt","userRoles","userId","id","isLoggedIn","sessionStorage","setItem","console","getItem","getPatientById","patientId","get"],"sources":["C:/Users/MAYUR GADEKAR/Desktop/HMS Frontend Git/HMS Frontend/src/services/user.js"],"sourcesContent":["import axios from 'axios';\r\nimport { createUrl, log } from '../utils/utils';\r\n\r\nexport async function registerUser(\r\n  name,\r\n  email,\r\n  password,\r\n  contactNo,\r\n  age,\r\n  bloodGroup,\r\n  address,\r\n  role\r\n) {\r\n  const url = createUrl('/patient/register');\r\n  const body = {\r\n    name,\r\n    email,\r\n    password,\r\n    contactNo,\r\n    age,\r\n    bloodGroup,\r\n    address,\r\n    role\r\n  };\r\n\r\n  try {\r\n   // Check if the user already exists by email\r\n    // try {\r\n    //   const getUserResponse = await axios.get(url);\r\n    //   debugger;\r\n    //   if (getUserResponse.data && getUserResponse.data.email === email) {\r\n    //     console.log(getUserResponse.data);\r\n    //     return { email: '' }; // Return an empty object to indicate existing email\r\n    //   }\r\n    //   if(getUserResponse.data && getUserResponse.data.role === 'Patient'){\r\n    //     return {userRoles : 'Patient'}\r\n    //   }\r\n    //   else if (getUserResponse.data && getUserResponse.data.userRoles === 'Admin'){\r\n    //     return {userRoles : 'Admin'}\r\n    //   }\r\n    //   else if (getUserResponse.data && getUserResponse.data.userRoles === 'Doctor'){\r\n    //     return {userRoles : 'Doctor'}\r\n    //   }\r\n    // } catch (getUserEx) {\r\n    //    log('Error fetching user data by email:', getUserEx);\r\n    // }\r\n\r\n    // Proceed with registration if the email is not found in the database\r\n    debugger;\r\n    const response = await axios.post(url, body);\r\n    log(response.data);\r\n    return response.data;\r\n  } catch (ex) {\r\n    log('Error registering user:', ex);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function loginUser(email, password) {\r\n  //const url = createUrl('/auth/signin')\r\n  const url = createUrl('/authenticate/signin')\r\n  const body = {\r\n    email,\r\n    password,\r\n  }\r\n\r\n  // wait till axios is making the api call and getting response from server\r\n  try {\r\n    const response = await axios.post(url, body)\r\n    log(response.data)\r\n    debugger; \r\n    const token = response.data.jwt;\r\n    const userRoles = response.data.role;\r\n    const userId = response.data.id;\r\n    const isLoggedIn = true;//response.data.isLoggedIn;\r\n\r\n    sessionStorage.setItem(\"token\" , token);\r\n    sessionStorage.setItem(\"userRoles\", userRoles);\r\n    sessionStorage.setItem(\"userId\", userId);\r\n    sessionStorage.setItem(\"isLoggedIn\", isLoggedIn);\r\n    console.log(sessionStorage.getItem(userId));\r\n    return response.data\r\n  } catch (ex) {\r\n    log(ex)\r\n    return null\r\n  }\r\n}\r\n\r\nexport async function getPatientById(patientId){\r\n\r\n  const url = createUrl(`/patient/${patientId}`)\r\ndebugger;\r\n  // const body = {\r\n  //   patientId\r\n  // }\r\n  // wait till axios is making the api call and getting response from server\r\n  try {\r\n    const response = await axios.get(url)\r\n    log(response.data)\r\n    debugger; \r\n    // const token = response.data.jwt;\r\n    // const userRoles = response.data.role;\r\n    // const userId = response.data.id;\r\n    // const isLoggedIn = true;//response.data.isLoggedIn;\r\n\r\n    // sessionStorage.setItem(\"token\" , token);\r\n    // sessionStorage.setItem(\"userRoles\", userRoles);\r\n    // sessionStorage.setItem(\"userId\", userId);\r\n    // sessionStorage.setItem(\"isLoggedIn\", isLoggedIn);\r\n    return response.data\r\n  } catch (ex) {\r\n    log(ex)\r\n    return null\r\n  }\r\n}"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,GAApB,QAA+B,gBAA/B;AAEA,OAAO,eAAeC,YAAf,CACLC,IADK,EAELC,KAFK,EAGLC,QAHK,EAILC,SAJK,EAKLC,GALK,EAMLC,UANK,EAOLC,OAPK,EAQLC,IARK,EASL;EACA,MAAMC,GAAG,GAAGX,SAAS,CAAC,mBAAD,CAArB;EACA,MAAMY,IAAI,GAAG;IACXT,IADW;IAEXC,KAFW;IAGXC,QAHW;IAIXC,SAJW;IAKXC,GALW;IAMXC,UANW;IAOXC,OAPW;IAQXC;EARW,CAAb;;EAWA,IAAI;IACH;IACC;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA,MAAMG,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAN,CAAWH,GAAX,EAAgBC,IAAhB,CAAvB;IACAX,GAAG,CAACY,QAAQ,CAACE,IAAV,CAAH;IACA,OAAOF,QAAQ,CAACE,IAAhB;EACD,CA3BD,CA2BE,OAAOC,EAAP,EAAW;IACXf,GAAG,CAAC,yBAAD,EAA4Be,EAA5B,CAAH;IACA,OAAO,IAAP;EACD;AACF;AAED,OAAO,eAAeC,SAAf,CAAyBb,KAAzB,EAAgCC,QAAhC,EAA0C;EAC/C;EACA,MAAMM,GAAG,GAAGX,SAAS,CAAC,sBAAD,CAArB;EACA,MAAMY,IAAI,GAAG;IACXR,KADW;IAEXC;EAFW,CAAb,CAH+C,CAQ/C;;EACA,IAAI;IACF,MAAMQ,QAAQ,GAAG,MAAMd,KAAK,CAACe,IAAN,CAAWH,GAAX,EAAgBC,IAAhB,CAAvB;IACAX,GAAG,CAACY,QAAQ,CAACE,IAAV,CAAH;IACA;IACA,MAAMG,KAAK,GAAGL,QAAQ,CAACE,IAAT,CAAcI,GAA5B;IACA,MAAMC,SAAS,GAAGP,QAAQ,CAACE,IAAT,CAAcL,IAAhC;IACA,MAAMW,MAAM,GAAGR,QAAQ,CAACE,IAAT,CAAcO,EAA7B;IACA,MAAMC,UAAU,GAAG,IAAnB,CAPE,CAOsB;;IAExBC,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAAiCP,KAAjC;IACAM,cAAc,CAACC,OAAf,CAAuB,WAAvB,EAAoCL,SAApC;IACAI,cAAc,CAACC,OAAf,CAAuB,QAAvB,EAAiCJ,MAAjC;IACAG,cAAc,CAACC,OAAf,CAAuB,YAAvB,EAAqCF,UAArC;IACAG,OAAO,CAACzB,GAAR,CAAYuB,cAAc,CAACG,OAAf,CAAuBN,MAAvB,CAAZ;IACA,OAAOR,QAAQ,CAACE,IAAhB;EACD,CAfD,CAeE,OAAOC,EAAP,EAAW;IACXf,GAAG,CAACe,EAAD,CAAH;IACA,OAAO,IAAP;EACD;AACF;AAED,OAAO,eAAeY,cAAf,CAA8BC,SAA9B,EAAwC;EAE7C,MAAMlB,GAAG,GAAGX,SAAS,CAAE,YAAW6B,SAAU,EAAvB,CAArB;EACF,SAH+C,CAI7C;EACA;EACA;EACA;;EACA,IAAI;IACF,MAAMhB,QAAQ,GAAG,MAAMd,KAAK,CAAC+B,GAAN,CAAUnB,GAAV,CAAvB;IACAV,GAAG,CAACY,QAAQ,CAACE,IAAV,CAAH;IACA,SAHE,CAIF;IACA;IACA;IACA;IAEA;IACA;IACA;IACA;;IACA,OAAOF,QAAQ,CAACE,IAAhB;EACD,CAdD,CAcE,OAAOC,EAAP,EAAW;IACXf,GAAG,CAACe,EAAD,CAAH;IACA,OAAO,IAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}