{"ast":null,"code":"import axios from 'axios';\nimport { createUrl, log } from '../utils/utils';\nexport async function registerUser(name, email, password, contact, age, bloodGroup, address, role) {\n  const url = createUrl('/patient/register');\n  const body = {\n    name,\n    email,\n    password,\n    contact,\n    age,\n    bloodGroup,\n    address,\n    role\n  };\n\n  try {\n    // Check if the user already exists by email\n    try {\n      // const getUserResponse = await axios.get(url);\n      // if (getUserResponse.data && getUserResponse.data.email === email) {\n      //   console.log(getUserResponse.data);\n      //   return { email: '' }; // Return an empty object to indicate existing email\n      // }\n      if (getUserResponse.data && getUserResponse.data.role === 'Patient') {\n        return {\n          userRoles: 'Patient'\n        };\n      } else if (getUserResponse.data && getUserResponse.data.userRoles === 'ADMIN') {\n        return {\n          userRoles: 'ADMIN'\n        };\n      } else if (getUserResponse.data && getUserResponse.data.userRoles === 'SALESPERSON') {\n        return {\n          userRoles: 'SALESPERSON'\n        };\n      }\n    } catch (getUserEx) {\n      log('Error fetching user data by email:', getUserEx);\n    } // Proceed with registration if the email is not found in the database\n\n\n    const response = await axios.post(url, body);\n    log(response.data);\n    return response.data;\n  } catch (ex) {\n    log('Error registering user:', ex);\n    return null;\n  }\n}\nexport async function loginUser(email, password) {\n  //const url = createUrl('/auth/signin')\n  const url = createUrl('/patient/signin');\n  const body = {\n    email,\n    password\n  }; // wait till axios is making the api call and getting response from server\n\n  try {\n    const response = await axios.post(url, body);\n    log(response.data);\n    debugger;\n    const token = response.data.jwt;\n    const userRoles = response.data.role;\n    const userId = response.data.id;\n    const isLoggedIn = true; //response.data.isLoggedIn;\n\n    sessionStorage.setItem(\"token\", token);\n    sessionStorage.setItem(\"userRoles\", userRoles);\n    sessionStorage.setItem(\"userId\", userId);\n    sessionStorage.setItem(\"isLoggedIn\", isLoggedIn);\n    return response.data;\n  } catch (ex) {\n    log(ex);\n    return null;\n  }\n}","map":{"version":3,"names":["axios","createUrl","log","registerUser","name","email","password","contact","age","bloodGroup","address","role","url","body","getUserResponse","data","userRoles","getUserEx","response","post","ex","loginUser","token","jwt","userId","id","isLoggedIn","sessionStorage","setItem"],"sources":["C:/Users/MAYUR GADEKAR/Desktop/HMS Frontend Git/HMS Frontend/src/services/user.js"],"sourcesContent":["import axios from 'axios';\r\nimport { createUrl, log } from '../utils/utils';\r\n\r\nexport async function registerUser(\r\n  name,\r\n  email,\r\n  password,\r\n  contact,\r\n  age,\r\n  bloodGroup,\r\n  address,\r\n  role\r\n) {\r\n  const url = createUrl('/patient/register');\r\n  const body = {\r\n    name,\r\n    email,\r\n    password,\r\n    contact,\r\n    age,\r\n    bloodGroup,\r\n    address,\r\n    role\r\n  };\r\n\r\n  try {\r\n   // Check if the user already exists by email\r\n    try {\r\n      // const getUserResponse = await axios.get(url);\r\n      // if (getUserResponse.data && getUserResponse.data.email === email) {\r\n      //   console.log(getUserResponse.data);\r\n      //   return { email: '' }; // Return an empty object to indicate existing email\r\n      // }\r\n      if(getUserResponse.data && getUserResponse.data.role === 'Patient'){\r\n        return {userRoles : 'Patient'}\r\n      }\r\n      else if (getUserResponse.data && getUserResponse.data.userRoles === 'ADMIN'){\r\n        return {userRoles : 'ADMIN'}\r\n      }\r\n      else if (getUserResponse.data && getUserResponse.data.userRoles === 'SALESPERSON'){\r\n        return {userRoles : 'SALESPERSON'}\r\n      }\r\n    } catch (getUserEx) {\r\n      log('Error fetching user data by email:', getUserEx);\r\n    }\r\n\r\n    // Proceed with registration if the email is not found in the database\r\n    const response = await axios.post(url, body);\r\n    log(response.data);\r\n    return response.data;\r\n  } catch (ex) {\r\n    log('Error registering user:', ex);\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function loginUser(email, password) {\r\n  //const url = createUrl('/auth/signin')\r\n  const url = createUrl('/patient/signin')\r\n  const body = {\r\n    email,\r\n    password,\r\n  }\r\n\r\n  // wait till axios is making the api call and getting response from server\r\n  try {\r\n    const response = await axios.post(url, body)\r\n    log(response.data)\r\n    debugger; \r\n    const token = response.data.jwt;\r\n    const userRoles = response.data.role;\r\n    const userId = response.data.id;\r\n    const isLoggedIn = true;//response.data.isLoggedIn;\r\n\r\n    sessionStorage.setItem(\"token\" , token);\r\n    sessionStorage.setItem(\"userRoles\", userRoles);\r\n    sessionStorage.setItem(\"userId\", userId);\r\n    sessionStorage.setItem(\"isLoggedIn\", isLoggedIn);\r\n    return response.data\r\n  } catch (ex) {\r\n    log(ex)\r\n    return null\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,SAAT,EAAoBC,GAApB,QAA+B,gBAA/B;AAEA,OAAO,eAAeC,YAAf,CACLC,IADK,EAELC,KAFK,EAGLC,QAHK,EAILC,OAJK,EAKLC,GALK,EAMLC,UANK,EAOLC,OAPK,EAQLC,IARK,EASL;EACA,MAAMC,GAAG,GAAGX,SAAS,CAAC,mBAAD,CAArB;EACA,MAAMY,IAAI,GAAG;IACXT,IADW;IAEXC,KAFW;IAGXC,QAHW;IAIXC,OAJW;IAKXC,GALW;IAMXC,UANW;IAOXC,OAPW;IAQXC;EARW,CAAb;;EAWA,IAAI;IACH;IACC,IAAI;MACF;MACA;MACA;MACA;MACA;MACA,IAAGG,eAAe,CAACC,IAAhB,IAAwBD,eAAe,CAACC,IAAhB,CAAqBJ,IAArB,KAA8B,SAAzD,EAAmE;QACjE,OAAO;UAACK,SAAS,EAAG;QAAb,CAAP;MACD,CAFD,MAGK,IAAIF,eAAe,CAACC,IAAhB,IAAwBD,eAAe,CAACC,IAAhB,CAAqBC,SAArB,KAAmC,OAA/D,EAAuE;QAC1E,OAAO;UAACA,SAAS,EAAG;QAAb,CAAP;MACD,CAFI,MAGA,IAAIF,eAAe,CAACC,IAAhB,IAAwBD,eAAe,CAACC,IAAhB,CAAqBC,SAArB,KAAmC,aAA/D,EAA6E;QAChF,OAAO;UAACA,SAAS,EAAG;QAAb,CAAP;MACD;IACF,CAfD,CAeE,OAAOC,SAAP,EAAkB;MAClBf,GAAG,CAAC,oCAAD,EAAuCe,SAAvC,CAAH;IACD,CAnBC,CAqBF;;;IACA,MAAMC,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAN,CAAWP,GAAX,EAAgBC,IAAhB,CAAvB;IACAX,GAAG,CAACgB,QAAQ,CAACH,IAAV,CAAH;IACA,OAAOG,QAAQ,CAACH,IAAhB;EACD,CAzBD,CAyBE,OAAOK,EAAP,EAAW;IACXlB,GAAG,CAAC,yBAAD,EAA4BkB,EAA5B,CAAH;IACA,OAAO,IAAP;EACD;AACF;AAED,OAAO,eAAeC,SAAf,CAAyBhB,KAAzB,EAAgCC,QAAhC,EAA0C;EAC/C;EACA,MAAMM,GAAG,GAAGX,SAAS,CAAC,iBAAD,CAArB;EACA,MAAMY,IAAI,GAAG;IACXR,KADW;IAEXC;EAFW,CAAb,CAH+C,CAQ/C;;EACA,IAAI;IACF,MAAMY,QAAQ,GAAG,MAAMlB,KAAK,CAACmB,IAAN,CAAWP,GAAX,EAAgBC,IAAhB,CAAvB;IACAX,GAAG,CAACgB,QAAQ,CAACH,IAAV,CAAH;IACA;IACA,MAAMO,KAAK,GAAGJ,QAAQ,CAACH,IAAT,CAAcQ,GAA5B;IACA,MAAMP,SAAS,GAAGE,QAAQ,CAACH,IAAT,CAAcJ,IAAhC;IACA,MAAMa,MAAM,GAAGN,QAAQ,CAACH,IAAT,CAAcU,EAA7B;IACA,MAAMC,UAAU,GAAG,IAAnB,CAPE,CAOsB;;IAExBC,cAAc,CAACC,OAAf,CAAuB,OAAvB,EAAiCN,KAAjC;IACAK,cAAc,CAACC,OAAf,CAAuB,WAAvB,EAAoCZ,SAApC;IACAW,cAAc,CAACC,OAAf,CAAuB,QAAvB,EAAiCJ,MAAjC;IACAG,cAAc,CAACC,OAAf,CAAuB,YAAvB,EAAqCF,UAArC;IACA,OAAOR,QAAQ,CAACH,IAAhB;EACD,CAdD,CAcE,OAAOK,EAAP,EAAW;IACXlB,GAAG,CAACkB,EAAD,CAAH;IACA,OAAO,IAAP;EACD;AACF"},"metadata":{},"sourceType":"module"}